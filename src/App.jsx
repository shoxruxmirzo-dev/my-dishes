import { useEffect, useState } from 'react';
import { supabase } from './lib/supabase';
import WebApp from '@twa-dev/sdk';
import { useTelegramTheme } from './hooks/useTelegramTheme';

function App() {
  const theme = useTelegramTheme();
  const [user, setUser] = useState(null);

  useEffect(() => {
    console.log('initDataUnsafe:', WebApp.initDataUnsafe);

    const initUser = async () => {
      const tgUser = WebApp.initDataUnsafe && WebApp.initDataUnsafe.user;

      if (!tgUser) {
        console.log(
          '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram.'
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ supabase
      const { data: existingUser, error: selectError } = await supabase
        .from('users')
        .select('*')
        .eq('telegram_id', tgUser.id)
        .maybeSingle();

      if (selectError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ select:', selectError);
        return;
      }

      if (existingUser) {
        console.log('–ù–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ:', existingUser);
        setUser(existingUser);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data, error: insertError } = await supabase
          .from('users')
          .insert([
            {
              telegram_id: tgUser.id,
              first_name: tgUser.first_name,
              last_name: tgUser.last_name,
              username: tgUser.username,
              photo_url: tgUser.photo_url ? tgUser.photo_url : null,
              language_code: tgUser.language_code,
            },
          ])
          .select()
          .single();

        if (insertError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ insert:', insertError);
        } else {
          console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', data);
          setUser(data);
        }
      }
    };

    initUser();
  }, []);

  return (
    <div
      className="min-h-screen p-4 flex flex-col items-center justify-center text-center"
      style={{
        backgroundColor: theme.bg_color,
        color: theme.text_color,
      }}
    >
      <h1 className="p-4 text-4xl font-semibold">Welcome to Mini App! üëã</h1>
      {user ? (
        <div className="mt-4 flex flex-col items-center justify-center gap-4 text-center">
          {user?.photo_url && (
            <img className="h-20 w-20 rounded" src={user.photo_url} alt="userImage" />
          )}

          <p>
            <strong>–í–∞—à Telegram ID:</strong> {user.telegram_id}
          </p>
          <p>
            <strong>–ò–º—è:</strong> {user.first_name}
          </p>
          <p>
            <strong>–§–∞–º–∏–ª–∏—è:</strong> {user.last_name}
          </p>
          <p>
            <strong>–ù–∏–∫–Ω–µ–π–º:</strong> @{user.username}
          </p>
          <p>
            <strong>–Ø–∑—ã–∫:</strong> {user.language_code}
          </p>
          {user.username && (
            <p>
              <strong>–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å Telegram:</strong>{' '}
              <a
                href={`https://t.me/${user.username}`}
                target="_blank"
                rel="noopener noreferrer"
                className="underline text-blue-300"
              >
                {`https://t.me/${user.username}`}
              </a>
            </p>
          )}
          <button
            className="px-4 py-2 rounded-xl shadow active:scale-95 transition duration-200"
            style={{
              backgroundColor: theme.button_color,
              color: theme.button_text_color,
            }}
          >
            –ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è
          </button>
        </div>
      ) : (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã...</p>
      )}
    </div>
  );
}

export default App;
